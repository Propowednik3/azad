***************AUTOFS**********************************
sudo apt-get install autofs
sudo nano /etc/auto.master
>>>>>INSERT
/mnt/NAS /etc/auto.cifs --timeout=120,--ghost
<<<<<<<
sudo nano /etc/auto.cifs
>>>>>INSERT
security -fstype=cifs,rw,username=pi,password=09078000 ://172.16.1.155/security
<<<<<<<
sudo chmod 0644 /etc/auto.cifs
sudo service autofs restart
*********************************************************
***************AUTOMOUNT USB DISC AFTER PLUG************
sudo nano /etc/udev/rules.d/automount.rules
>>>>INSERT
ACTION=="add" KERNEL=="sd[a-z][0-9]" RUN+="/bin/mount /dev/%k /mnt/FLASH"
<<<<

*********************************************************
*********************CHECK FILE SYSTEM**************************
fsck -y /dev/sda1
*******************************************************

*********************Format disc**********************************
###fdisk /dev/sda
###d			delete partitions
###n			new partition
###w			accept changes
###q			quit
sudo fdisk -l
sudo umount /dev/sdX
sudo mkfs.vfat /dev/sdX #где sdX - ваша флешка (например sdb1).
sudo mkfs.ext2 /dev/sdX
sudo mkfs.ext3 /dev/sdX
sudo mkfs.ext4 /dev/sdX
sudo mkfs.msdos /dev/sdX
sudo mkfs.reiserfs /dev/sdX
sudo mkfs.ntfs /dev/sdX
*********************EMERGENCY MODE FIX**********************************
umount/Dec/mmcblk0p2
e2fsck -f -y -v -C 0 /dev/mmcblk0p2
reboot
*******************************************************

*********************EMERGENCY MODE ENABLE*********************************
sudo nano /boot/config.txt
avoid_safe_mode=1
*******************************************************

*********************YOUTUBE******************************************
#Install
	sudo apt-get install youtube-dl
#Update
	sudo youtube-dl -U
#or
	sudo pip install --upgrade youtube-dl
	#if error
		sudo apt-get install python-setuptools
		sudo easy_install pip

**********************************************************************
*********************PERL LIBS**********************************
apt-get install libio-socket-ssl-perl
apt-get install libwww-perl
****************************************************************

*********************TAR**********************************
PACK:
tar -cvf file.tar /full/path - создать .tar
tar -czvf file.tar.gz /full/path - создать .tar.gz (архив)
tar -cjvf file.tar.bz2 /full/path - создать .tar.bz2 (архив)
UNPACK: 
tar -xvf file.tar.gz
***************************************************************

*********************SSH root*****************************
Login, and edit this file: sudo nano /etc/ssh/sshd_config
Find this line: PermitRootLogin without-password
Edit: PermitRootLogin yes
Close and save file
reboot or restart sshd service using: /etc/init.d/ssh restart
*******************************************************

***********************disk space free*******************
$ df -h 
*******************************************************

*********************rsync*****************************
sudo apt-get install rsync
*******************************************************

*************************Hostname change***************
sudo nano /etc/hosts
sudo nano /etc/hostname
sudo /etc/init.d/hostname.sh
sudo reboot
*******************************************************

*************************Hostname enable***************
sudo apt-get install samba
sudo apt-get install winbind
sudo nano /etc/nsswitch.conf
hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4
>>>>>>
hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4 wins
*******************************************************

*************************FAST BOOT*********************
sudo nano /boot/cmdline.txt
1) Removed console=tty1
2) Added noatime nodiratime
3) Added quiet
Example: dwc_otg.lpm_enable=0 root=/dev/mmcblk0p7 rootfstype=ext4 elevator=deadline noatime nodiratime fsck.repair=yes rootwait quiet smsc95xx.turbo_mode=N fbcon=map:10 fbcon=font:Acorn8x8
*******************************************************

*************************FILE COMMANDER****************
sudo apt-get install mc
#UTF-8
*******************************************************

*************************SASMBA CLIENT************************
sudo mkdir mountfoldername
a) sudo mount -t cifs -o guest "//WindowsPC/Share 1" /mnt/mountfoldername
b) sudo mount -t cifs -o username=yourusername,password=yourpassword //WindowsPC/share1 /mnt/mountfoldername
df -h
cd /mnt/mountfoldername
sudo nano /etc/fstab
>>>>>>>>>>>>>>>>>>>
a) //WindowsPC/Share1 /mnt/mountfoldername cifs guest 0 0
b) //WindowsPC/Share1 /mnt/mountfoldername cifs username=yourusername,password=yourpassword 0 0
<<<<<<<<<<<<<<<<<<<
more /etc/fstab
sudo reboot
*******************************************************

*************************SASMBA SERVER************************
sudo apt-get install samba samba-common-bin
sudo nano /etc/samba/smb.conf
>>>>>>>>>>>>>>>
[global]
workgroup = WORKGROUP
guest ok = yes
netbios name = Raspberry
security = share
browseable = yes

[www]
path = /var/www
writeable = yes
browseable = yes
<<<<<<<<<<<<<<<<
OR
>>>>>>>>>>>>>>>>>>
[global]
workgroup = WORKGROUP
server string = Samba Server
socket options = TCP_NODELAY IPTOS_LOWDELAY SO_KEEPALIVE SO_RCVBUF=8192 SO_SNDBUF=8192
log file = /var/log/samba.log
max log size = 500
security = user
map to guest = Bad User 
dns proxy = no

# следовать по симлинкам
unix extensions = no
wide links = yes
follow symlinks = yes

# utf кодировка
dos charset = cp866
unix charset = UTF8

# отключаем принтеры
load printers = no
show add printer wizard = no
printcap name = /dev/null
disable spoolss = yes

# hosts allow = 127.192.168.24.

# по умолчанию все файлы, начинающиеся с точки будут иметь атрибут "скрытый"
hide dot files = yes

[public]
comment = public folder
path = /mnt/HARD/public
read only = no
locking = no
browsable = yes 
# разрешить гостевой доступ
guest ok = yes
#force user = nobody 
#force group = nobody
# guest only = yes
# create mode = 0777
# directory mode = 0777

# разрешить доступ только user1, user2
# valid users = user1, user2

[security]
path = /mnt/HARD/security
valid users = pi
guest ok = no
writable = yes
browsable = yes
<<<<<<<<<<<<<<<<<<
smbpasswd -a pi
smbpasswd -e pi
<<<<<<<<<<<<<<<<<<
sudo /etc/init.d/samba restart
sudo apt-get install swat
*******************************************************

*************************USB MOUNT HARD************************
sudo fdisk -l
sudo fdisk /dev/sda1
sudo mkfs -t ext2 /dev/sda1
#sudo mount -t ext2 /dev/sda1
sudo mkdir /mnt/flash
sudo nano /etc/fstab
>>>>>>>>>>>>>>>>>>
/dev/sda1       /mnt/flash      ext2    defaults          0       0
<<<<<<<<<<<<<<<<<<
reboot
df
*******************************************************

*************************GPIO setup on BOOT************
Step 1: check that Raspberry Pi firmware is later than July 15th 2014
vcgencmd version
sudo apt-get update
sudo apt-get install device-tree-compiler
nano dt-blob.dts
sudo dtc -I dts -O dtb -o /boot/dt-blob.bin dt-blob.dts
*******************************************************

*************************libao*************************
sudo apt-get install libao-dev
**************************************************************

*************************Build fdk-aac*************************

We will use /home/pi/ as a working directory and put compiled binaries and header files in $HOME/pi/build/. Set the environment variable $PIBUILD.

$ export PIBUILD=/home/pi/build
$ mkdir $PIBUILD
$ cd ~/pi
Download fdk-aac-0.1.4.tar.gz (or the latest version) from http://sourceforge.net/projects/opencore-amr/.

$ tar zxvf fdk-aac-0.1.4.tar.gz
$ cd fdk-aac-0.1.4
$ CC=${CCPREFIX}gcc CXX=${CCPREFIX}g++ ./configure --host=arm-rpi-linux-gnueabi --prefix=$PIBUILD
$ make
$ make install
***************************************************************************

*************************alsa*************************
sudo apt-get install libasound2-dev libssl-dev
***************************************************************

*************************Build ffmpeg*************************
$ sudo apt-get install libasound2-dev libssl-dev
$ export PIUSR=/home/pi/usr
$ mkdir $PIUSR
$ cd $PIUSR
$ mkdir include lib
$ rsync -rav pi@raspberrypi:/usr/include/alsa/ $PIUSR/include/alsa/
$ rsync -rav pi@raspberrypi:/usr/lib/arm-linux-gnueabihf/libasound.so* $PIUSR/lib/
$ cd /home/pi/
$ git clone git://source.ffmpeg.org/ffmpeg.git
$ cd ffmpeg
$ PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PIBUILD/lib/pkgconfig CC=${CCPREFIX}gcc CXX=${CCPREFIX}g++ ./configure --enable-shared --enable-cross-compile --cross-prefix=${CCPREFIX} --arch=armel --target-os=linux --prefix=$PIBUILD --extra-cflags="-I$PIBUILD/include -I$PIUSR/include -fPIC" --extra-ldflags="-L$PIBUILD/lib -L$PIUSR/lib -fPIC" --enable-openssl --enable-libfdk-aac --enable-libmp3lame --pkg-config=`which pkg-config`
In the output of configure, make sure that:

"Enabled indevs" has "alsa"
"Enabled encoders" has "libfdk_aac"
If all goes well, build ffmpeg.

$ make
$ make install
If you are running on a system with multiple cores you can invoke make with the -j option. You get the number of cores with the first command.

$ cat /proc/cpuinfo | grep processor | wc -l
$ make -j <num cores>
$ make install
***************************************************************************

*************************Install dependencies*************************

Install libfontconfig1-dev and libharfbuzz-dev via apt-get.

$ sudo apt-get install libfontconfig1-dev libharfbuzz-dev
***************************************************************************

*************************LIRC******************************
###install lib_irc
sudo apt-get install lirc

sudo nano /etc/lirc/hardware.conf
>>>>>>>>>>>>>>>>>
# Arguments which will be used when launching lircd
LIRCD_ARGS="--uinput"
# Don't start lircmd even if there seems to be a good config file
# START_LIRCMD=false
# Don't start irexec, even if a good config file seems to exist.
# START_IREXEC=false
# Try to load appropriate kernel modules
LOAD_MODULES=true
# Run "lircd --driver=help" for a list of supported drivers.
DRIVER="default"
# usually /dev/lirc0 is the correct setting for systems using udev
DEVICE="/dev/lirc0"
MODULES="lirc_rpi"
# Default configuration files for your hardware if any
LIRCD_CONF=""
LIRCMD_CONF=""
>>>>>>>>>>>>>>>>>>>>>>

sudo nano /etc/modules
>>>>>>>>>>>>>>>>>>
lirc_dev
lirc_rpi gpio_in_pin=18
>>>>>>>>>>>>>>>>>>

sudo nano /boot/config.txt
>>>>>>>>>>>>>>>>>>
#dtoverlay=lirc-rpi,gpio_in_pull=up
dtoverlay=lirc-rpi,gpio_in_pin=18
>>>>>>>>>>>>>>>>>>

sudo reboot
**********************************************************

*********************DATE TIME UPDATE******************
sudo /etc/init.d/ntp stop
sudo ntpd -q -g
sudo /etc/init.d/ntp start
*******************************************************

*********************SHEDULLER******************
crond
crontab -l 		//list
*/1 * * * * /etc/wpa_supplicant/testwifi.sh 2> /var/log/testwifi.log
crontab -e		//edit
*******************************************************

*********************LAN (WIFI)******************
//////etc/wpa_supplicant/testwifi.sh////////////
echo '/etc/wpa_supplicant/testwifi.sh log'
TESTIP=192.168.1.115

ping -c4 ${TESTIP} > /dev/null

if [ $? != 0 ]
then
    logger -t $0 "WiFi seems down, restarting"
    sudo /sbin/ifdown --force wlan0
    sleep 10
    sudo /sbin/ifup wlan0
#else
#    logger -t $0 "WiFi seems up."
fi
//////////////////////////////////////////////

//////etc/wpa_supplicant/wpa_supplicant.conf////////////
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
ssid="Tomato"
proto=RSN
key_mgmt=WPA-PSK
pairwise=CCMP TKIP
group=CCMP TKIP
psk="09078000RtY00645546"
auth_alg=OPEN
}
//////////////////////////////////////////////

///////////////etc/network/interfaces/////////////
auto lo
iface lo inet loopback
#iface eth0 inet dhcp

allow-hotplug wlan0
iface wlan0 inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf

iface default inet static

address 192.168.1.11
#netmask 255.255.255.0
#network 192.168.1.0
#gateway 192.168.1.155
#nameserver 192.168.1.115
auto wlan0

iface eth0 inet static
address 192.168.3.55
netmask 255.255.252.0
gateway 192.168.0.155
nameserver 192.168.0.185
nameserver 192.168.3.187
auto eth0
//////////////////////////////////////////////////
********************************************************
**********************UPDATE**********************
sudo apt-get update
sudo apt-get upgrade
sudo apt-get clean
********************************************************

**********************USB AUDIO**********************
sudo nano /etc/modprobe.d/alsa-base.conf
options snd-usb-audio index=1
amixer cset numid=3 1 ///analog
amixer cset numid=3 2 ///HDMI

or 

sudo nano /usr/share/alsa/alsa.conf
defaults.pcm.card 1

********************************************************


******************sudo passwd root**********************
$ sudo passwd root
********************************************************


**********************Finding ALSA device name**********************

First, find ALSA device name of your microphone.

    $ arecord -l
    **** List of CAPTURE Hardware Devices ****
    card 1: Device [USB PnP Sound Device], device 0: USB Audio [USB Audio]
      Subdevices: 1/1
      Subdevice #0: subdevice #0

ALSA device name is consisted of `hw:<card>,<device>`. In the above example, the ALSA device name is `hw:1,0`.

If you got `no soundcards found` error, try `sudo arecord -l`. If that output looks good, you might want to add your user to `audio` group.

    $ sudo usermod -a -G audio $USER
    (once logout, then login)
    $ groups
    wheel audio pi  <-- (make sure that audio is in the list)
    $ arecord -l
    **** List of CAPTURE Hardware Devices ****
    card 1: Device [USB PnP Sound Device], device 0: USB Audio [USB Audio]
      Subdevices: 1/1
      Subdevice #0: subdevice #0
	  
aplay /usr/share/scratch/Media/Sounds/Vocals/Singer2.wav
******************************************************************

***********************VPN SERVER************************************
sudo apt-get install rng-tools
*********************************************************************

**********************enable diffie-hellman-group1-sha1 on Jessie**********************
sudo nano /etc/ssh/sshd_config
>>>add>>>
KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
<<<<
ssh-keygen -A
******************************************************************

**********************I2C**********************
Run sudo raspi-config and follow the prompts to install i2c support for the ARM core and linux kernel
******************************************************************

**********************IPSec generate key**********************
1) example private key file 'VPNKeyUnEnc.key':
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCoQ9ft12ZFgK6V
lH4GT5pgwuAZQcxEDrMZ4C1p+1FubZGGSXob9D+FSXRd0+WIf+0j8uY7afkTjXZ7
bA/Lp8pfhG5FXy+w3gY19o4+3DGENix4W2PqwF+eDgQzYMZKhTHcThh9r0R4gwKM
ApvUZA00VAZuAda73M1ESJGoIbf+ySgr0bNzjPD+hz9ss81XYuAEQ2K2A7qQQXDY
3pscYox7QTlGQ21gf+wpOP8w+XcZJ1yIzyQJ8rOeAOf/chFf/FueO82e1P72Ypl1
pyY6whkSCfp2/Ta/CZwQQ3WsvATDD93HlCGN3spiL6kRKlz7G8/gb59OMxu/PzmW
PBu9kIJnAgMBAAECggEAKKAQrzT1VUyHWkf60W1AuaHzV0XCmp/t8A5nCJKMC5xa
qVBuMfebqoOcm9bAMV+pkqdfnPKuF2FtPMlPWv1M6BjiQs+DhTFl0HuRxm2FawVl
YT23dwMxUsjRjNINrgpQin80fIvnfS0sXT93/iSV549t6ft5q+vYh2b5+90APnxQ
f2on2ayjF+SXKBjKpajbjLELwDhJe71HbrsbVOk3OOnhVati0zp4EPhfMsFcABk0
qBFR57frv2kAtAFR8/VTV68Kbdu4HKyDZX3UofqvEmPv9N9q39IbS9ULcz5XkCs1
G1NkYJBbde53msh4VQNhpulHLQmV1dPOO+J21STQmQKBgQDUASaIP2SLdNsGlo0R
Z9RsB23NnbKbghFPDTr/4Elnc7v/mZrzlhF4IbHuvblLUEoMNnotGPnbUHYAr9Vm
G6t5Xbqda+03nFnEVUhLNUEyMX9KPKb3rdSsKFdZBMdSx2qDNJ4DZzeg5OO5UZ1U
/xkOLgJzlbAh1tBSXTEXfwFvewKBgQDLLwKcoydltQmbNbSH5Zkk3RC5wJPhbeP5
isCt0vl68AsFfQP53qqmhFM9gbCBceYvDZ7B48n7qi/99iAsJORRZsMApoSaIAXS
dPNYHtWty+Wwha0l0vuUrHWD9EaD9jKCzXTeY+1UdMV/J5jCU3qdrYZ9TmXGc71z
f+VKsalvBQKBgQCIsKE2caETJWneqo0T7t0QNg3+57F0AH3GeWJT/jl1wTIyj8hP
S6/Bw//kTWE+BOtpSmqlzxex5wPeV4CA0FBT9THQM/kDxQQ/yTjOfOynPzCyHb8N
rH+V7IC8/Y7CeZ7cL729tfww+cM2BkApwDxYXyPngFjKyKUSpdF0M8gqJwKBgQCu
1Nyie6FC2uxRKX0WEnIcTjw+GX8l0rD/4Gy7JXaWWkahilkJgJfGgMY/foCqYZ93
jXi1zZPXgTGajVZRpczwXkQdIyumkzdvSEK76Ixk57XUlrHOgiUIYP0ddevXUNlV
xARz9/gXXAM0zpWbYMl5M/8tg2//u0ehQsPB6e2pIQKBgGBVO063win2ClvKAdxb
/nh6VEuiIYXitoa/fXUIWtFnoJdM1ki8GolP2QyoCQhGAkBzUTIZ1TU0MoukJRy0
WfaF5GOyFk/7Ix73gY89cw9k7n+9rUILOz8Fc4zN1RE68HCn8Zg6TQsXYwORkbjq
TiqL6XofIdvZecmQHHTHIrcs
-----END PRIVATE KEY-----
2) cd /etc/ipsec.d/private
3) openssl rsa -in VPNKeyUnEnc.key -outform pem -out VPNKey.pem
**********************************************************************************


